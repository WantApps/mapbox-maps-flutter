// Autogenerated from Pigeon (v3.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.mapbox.maps.pigeons;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class FLTZnaidyAnnotationMessager {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ZnaidyAnnotation {
    private @NonNull String id;
    public @NonNull String getId() { return id; }
    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @Nullable Map<String, Object> geometry;
    public @Nullable Map<String, Object> getGeometry() { return geometry; }
    public void setGeometry(@Nullable Map<String, Object> setterArg) {
      this.geometry = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ZnaidyAnnotation() {}
    public static final class Builder {
      private @Nullable String id;
      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable Map<String, Object> geometry;
      public @NonNull Builder setGeometry(@Nullable Map<String, Object> setterArg) {
        this.geometry = setterArg;
        return this;
      }
      public @NonNull ZnaidyAnnotation build() {
        ZnaidyAnnotation pigeonReturn = new ZnaidyAnnotation();
        pigeonReturn.setId(id);
        pigeonReturn.setGeometry(geometry);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("geometry", geometry);
      return toMapResult;
    }
    static @NonNull ZnaidyAnnotation fromMap(@NonNull Map<String, Object> map) {
      ZnaidyAnnotation pigeonResult = new ZnaidyAnnotation();
      Object id = map.get("id");
      pigeonResult.setId((String)id);
      Object geometry = map.get("geometry");
      pigeonResult.setGeometry((Map<String, Object>)geometry);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ZnaidyAnnotationOptions {
    private @Nullable Map<String, Object> geometry;
    public @Nullable Map<String, Object> getGeometry() { return geometry; }
    public void setGeometry(@Nullable Map<String, Object> setterArg) {
      this.geometry = setterArg;
    }

    public static final class Builder {
      private @Nullable Map<String, Object> geometry;
      public @NonNull Builder setGeometry(@Nullable Map<String, Object> setterArg) {
        this.geometry = setterArg;
        return this;
      }
      public @NonNull ZnaidyAnnotationOptions build() {
        ZnaidyAnnotationOptions pigeonReturn = new ZnaidyAnnotationOptions();
        pigeonReturn.setGeometry(geometry);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("geometry", geometry);
      return toMapResult;
    }
    static @NonNull ZnaidyAnnotationOptions fromMap(@NonNull Map<String, Object> map) {
      ZnaidyAnnotationOptions pigeonResult = new ZnaidyAnnotationOptions();
      Object geometry = map.get("geometry");
      pigeonResult.setGeometry((Map<String, Object>)geometry);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class OnZnaidyAnnotationClickListenerCodec extends StandardMessageCodec {
    public static final OnZnaidyAnnotationClickListenerCodec INSTANCE = new OnZnaidyAnnotationClickListenerCodec();
    private OnZnaidyAnnotationClickListenerCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ZnaidyAnnotation.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ZnaidyAnnotation) {
        stream.write(128);
        writeValue(stream, ((ZnaidyAnnotation) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class OnZnaidyAnnotationClickListener {
    private final BinaryMessenger binaryMessenger;
    public OnZnaidyAnnotationClickListener(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return OnZnaidyAnnotationClickListenerCodec.INSTANCE;
    }

    public void onZnaidyAnnotationClick(@NonNull ZnaidyAnnotation annotationArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OnZnaidyAnnotationClickListener.onZnaidyAnnotationClick", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(annotationArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class _ZnaidyAnnotationMessagerCodec extends StandardMessageCodec {
    public static final _ZnaidyAnnotationMessagerCodec INSTANCE = new _ZnaidyAnnotationMessagerCodec();
    private _ZnaidyAnnotationMessagerCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ZnaidyAnnotation.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return ZnaidyAnnotationOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ZnaidyAnnotation) {
        stream.write(128);
        writeValue(stream, ((ZnaidyAnnotation) value).toMap());
      } else 
      if (value instanceof ZnaidyAnnotationOptions) {
        stream.write(129);
        writeValue(stream, ((ZnaidyAnnotationOptions) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface _ZnaidyAnnotationMessager {
    void create(@NonNull String managerId, @NonNull ZnaidyAnnotationOptions annotationOptions, Result<ZnaidyAnnotation> result);
    void update(@NonNull String managerId, @NonNull ZnaidyAnnotation annotation, Result<Void> result);
    void delete(@NonNull String managetId, @NonNull ZnaidyAnnotation annotation, Result<Void> result);

    /** The codec used by _ZnaidyAnnotationMessager. */
    static MessageCodec<Object> getCodec() {
      return _ZnaidyAnnotationMessagerCodec.INSTANCE;
    }

    /** Sets up an instance of `_ZnaidyAnnotationMessager` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, _ZnaidyAnnotationMessager api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._ZnaidyAnnotationMessager.create", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              ZnaidyAnnotationOptions annotationOptionsArg = (ZnaidyAnnotationOptions)args.get(1);
              if (annotationOptionsArg == null) {
                throw new NullPointerException("annotationOptionsArg unexpectedly null.");
              }
              Result<ZnaidyAnnotation> resultCallback = new Result<ZnaidyAnnotation>() {
                public void success(ZnaidyAnnotation result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.create(managerIdArg, annotationOptionsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._ZnaidyAnnotationMessager.update", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managerIdArg = (String)args.get(0);
              if (managerIdArg == null) {
                throw new NullPointerException("managerIdArg unexpectedly null.");
              }
              ZnaidyAnnotation annotationArg = (ZnaidyAnnotation)args.get(1);
              if (annotationArg == null) {
                throw new NullPointerException("annotationArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.update(managerIdArg, annotationArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._ZnaidyAnnotationMessager.delete", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String managetIdArg = (String)args.get(0);
              if (managetIdArg == null) {
                throw new NullPointerException("managetIdArg unexpectedly null.");
              }
              ZnaidyAnnotation annotationArg = (ZnaidyAnnotation)args.get(1);
              if (annotationArg == null) {
                throw new NullPointerException("annotationArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.delete(managetIdArg, annotationArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
