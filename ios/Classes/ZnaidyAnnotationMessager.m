// Autogenerated from Pigeon (v3.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "ZnaidyAnnotationMessager.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface FLTZnaidyAnnotation ()
+ (FLTZnaidyAnnotation *)fromMap:(NSDictionary *)dict;
+ (nullable FLTZnaidyAnnotation *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTZnaidyAnnotationOptions ()
+ (FLTZnaidyAnnotationOptions *)fromMap:(NSDictionary *)dict;
+ (nullable FLTZnaidyAnnotationOptions *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation FLTZnaidyAnnotation
+ (instancetype)makeWithId:(NSString *)id
    geometry:(nullable NSDictionary<NSString *, id> *)geometry {
  FLTZnaidyAnnotation* pigeonResult = [[FLTZnaidyAnnotation alloc] init];
  pigeonResult.id = id;
  pigeonResult.geometry = geometry;
  return pigeonResult;
}
+ (FLTZnaidyAnnotation *)fromMap:(NSDictionary *)dict {
  FLTZnaidyAnnotation *pigeonResult = [[FLTZnaidyAnnotation alloc] init];
  pigeonResult.id = GetNullableObject(dict, @"id");
  NSAssert(pigeonResult.id != nil, @"");
  pigeonResult.geometry = GetNullableObject(dict, @"geometry");
  return pigeonResult;
}
+ (nullable FLTZnaidyAnnotation *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FLTZnaidyAnnotation fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"id" : (self.id ?: [NSNull null]),
    @"geometry" : (self.geometry ?: [NSNull null]),
  };
}
@end

@implementation FLTZnaidyAnnotationOptions
+ (instancetype)makeWithGeometry:(nullable NSDictionary<NSString *, id> *)geometry {
  FLTZnaidyAnnotationOptions* pigeonResult = [[FLTZnaidyAnnotationOptions alloc] init];
  pigeonResult.geometry = geometry;
  return pigeonResult;
}
+ (FLTZnaidyAnnotationOptions *)fromMap:(NSDictionary *)dict {
  FLTZnaidyAnnotationOptions *pigeonResult = [[FLTZnaidyAnnotationOptions alloc] init];
  pigeonResult.geometry = GetNullableObject(dict, @"geometry");
  return pigeonResult;
}
+ (nullable FLTZnaidyAnnotationOptions *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FLTZnaidyAnnotationOptions fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"geometry" : (self.geometry ?: [NSNull null]),
  };
}
@end

@interface FLTOnZnaidyAnnotationClickListenerCodecReader : FlutterStandardReader
@end
@implementation FLTOnZnaidyAnnotationClickListenerCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTZnaidyAnnotation fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLTOnZnaidyAnnotationClickListenerCodecWriter : FlutterStandardWriter
@end
@implementation FLTOnZnaidyAnnotationClickListenerCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTZnaidyAnnotation class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLTOnZnaidyAnnotationClickListenerCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTOnZnaidyAnnotationClickListenerCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTOnZnaidyAnnotationClickListenerCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTOnZnaidyAnnotationClickListenerCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTOnZnaidyAnnotationClickListenerGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLTOnZnaidyAnnotationClickListenerCodecReaderWriter *readerWriter = [[FLTOnZnaidyAnnotationClickListenerCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


@interface FLTOnZnaidyAnnotationClickListener ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FLTOnZnaidyAnnotationClickListener

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onZnaidyAnnotationClickAnnotation:(FLTZnaidyAnnotation *)arg_annotation completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.OnZnaidyAnnotationClickListener.onZnaidyAnnotationClick"
      binaryMessenger:self.binaryMessenger
      codec:FLTOnZnaidyAnnotationClickListenerGetCodec()];
  [channel sendMessage:@[arg_annotation ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end
@interface FLT_ZnaidyAnnotationMessagerCodecReader : FlutterStandardReader
@end
@implementation FLT_ZnaidyAnnotationMessagerCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTZnaidyAnnotation fromMap:[self readValue]];
    
    case 129:     
      return [FLTZnaidyAnnotationOptions fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLT_ZnaidyAnnotationMessagerCodecWriter : FlutterStandardWriter
@end
@implementation FLT_ZnaidyAnnotationMessagerCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTZnaidyAnnotation class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTZnaidyAnnotationOptions class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLT_ZnaidyAnnotationMessagerCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_ZnaidyAnnotationMessagerCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_ZnaidyAnnotationMessagerCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_ZnaidyAnnotationMessagerCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLT_ZnaidyAnnotationMessagerGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLT_ZnaidyAnnotationMessagerCodecReaderWriter *readerWriter = [[FLT_ZnaidyAnnotationMessagerCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FLT_ZnaidyAnnotationMessagerSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_ZnaidyAnnotationMessager> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._ZnaidyAnnotationMessager.create"
        binaryMessenger:binaryMessenger
        codec:FLT_ZnaidyAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createManagerId:annotationOptions:completion:)], @"FLT_ZnaidyAnnotationMessager api (%@) doesn't respond to @selector(createManagerId:annotationOptions:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTZnaidyAnnotationOptions *arg_annotationOptions = GetNullableObjectAtIndex(args, 1);
        [api createManagerId:arg_managerId annotationOptions:arg_annotationOptions completion:^(FLTZnaidyAnnotation *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._ZnaidyAnnotationMessager.update"
        binaryMessenger:binaryMessenger
        codec:FLT_ZnaidyAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateManagerId:annotation:completion:)], @"FLT_ZnaidyAnnotationMessager api (%@) doesn't respond to @selector(updateManagerId:annotation:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTZnaidyAnnotation *arg_annotation = GetNullableObjectAtIndex(args, 1);
        [api updateManagerId:arg_managerId annotation:arg_annotation completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon._ZnaidyAnnotationMessager.delete"
        binaryMessenger:binaryMessenger
        codec:FLT_ZnaidyAnnotationMessagerGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(deleteManagetId:annotation:completion:)], @"FLT_ZnaidyAnnotationMessager api (%@) doesn't respond to @selector(deleteManagetId:annotation:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managetId = GetNullableObjectAtIndex(args, 0);
        FLTZnaidyAnnotation *arg_annotation = GetNullableObjectAtIndex(args, 1);
        [api deleteManagetId:arg_managetId annotation:arg_annotation completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
